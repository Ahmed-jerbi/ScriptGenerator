using System;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Linq;

namespace JungleDiamond
{
    public partial class Main : Form
    {
        // Declaring global variables
        public XDocument xdoc = new XDocument(new XDeclaration("1.0", "utf-8",null ),new XElement("VIOSO"));
        public Main()
        {
            InitializeComponent();

        }
/// <summary>
/// Initializing the application
/// </summary>
        public void Main_Load(object sender, EventArgs e)
        {
            //Init of title text
            titleLabel.Text = "Script Generator v"+Application.ProductVersion;
            // Init of XML file  
            xdoc.Root.Add(new XComment("Generated by VIOSO Script Generator, v1 © 2021"));
            xdoc.Root.Add(new XElement("File", new XAttribute("version","1.0.0"), new XAttribute("build", "1234")));
        }



/// <summary>
/// Handles the choice of the functions in the dropdown: puts the corresponding Box in the active panel and shows it.
/// </summary>
        private void functionBox_indexChanged(object sender, EventArgs e)
        {
            // check if we changed to a valid index
            if (functionBox.SelectedIndex != -1)
            {
                addButton.Enabled = true;

                //show the corresponding controls
                switch (functionBox.SelectedItem.ToString())
                {
                    case "Load":
                        activePanel.Controls.Clear();
                        activePanel.Controls.Add(LoadBox);
                        LoadBox.Visible = true;
                        LoadBox.Location = new Point(0, 0);
                        break;


                    case "Copy/transfer":
                        activePanel.Controls.Clear();
                        activePanel.Controls.Add(CopyBox);
                        CopyBox.Visible = true;
                        CopyBox.Location = new Point(0, 0);
                        break;

                    case "Wait":
                        activePanel.Controls.Clear();
                        activePanel.Controls.Add(WaitBox);
                        WaitBox.Visible = true;
                        WaitBox.Location = new Point(0, 0);
                        break;

                    case "Save":
                        activePanel.Controls.Clear();
                        activePanel.Controls.Add(saveBox);
                        saveBox.Visible = true;
                        saveBox.Location = new Point(0, 0);
                        break;
                    case "Recalibrate":
                        activePanel.Controls.Clear();
                        activePanel.Controls.Add(RecalibBox);
                        RecalibBox.Visible = true;
                        RecalibBox.Location = new Point(0, 0);
                        InteractBox.SelectedIndex = 0;
                        break;
                    case "Recalculate Blending [3D]":
                        activePanel.Controls.Clear();
                        activePanel.Controls.Add(RecalBlendBox);
                        RecalBlendBox.Visible = true;
                        RecalBlendBox.Location = new Point(0, 0);
                        break;
                    case "Add VC to display Geometry":
                        activePanel.Controls.Clear();
                        activePanel.Controls.Add(AddVcBox);
                        AddVcBox.Visible = true;
                        AddVcBox.Location = new Point(0, 0);
                        break;
                    case "Custom content space conversion":
                        activePanel.Controls.Clear();
                        activePanel.Controls.Add(CCSBox);
                        CCSBox.Visible = true;
                        CCSBox.Location = new Point(0, 0);
                        break;
                    case "Export":
                        activePanel.Controls.Clear();
                        activePanel.Controls.Add(ExportBox);
                        ExportBox.Visible = true;
                        ExportBox.Location = new Point(0, 0);
                        break;


                    default:
                        activePanel.Controls.Clear();
                        Console.WriteLine("No Valid Selection");
                        break;
                }
            }



        }
 
        
/// <summary>
/// Adds the user entries to the ScriptList
/// </summary>

        private void addButton_click(object sender, EventArgs e)
        {
            //create a list item
            ListViewItem lvi = new ListViewItem();
            //fill the item depending on the function selected
            if (functionBox.SelectedIndex != -1)
                switch (functionBox.SelectedItem.ToString())
            {
                case "Load":
                    //Nb
                    lvi.Text = scriptList.Items.Count.ToString();
                    //Name
                    lvi.SubItems.Add(functionBox.SelectedItem.ToString());
                    //argument
                    lvi.SubItems.Add(loadText.Text+".sps");
                    //--> add the ScriptList
                    scriptList.Items.Add(lvi);
                    //XML elements
                    xdoc.Root.Add(new XElement("task", new XAttribute("action", "Load"), new XAttribute("name", "calib"), new XAttribute("type", "file"), new XAttribute("subtype", "sps"), new XAttribute("use", lvi.Text)));
                    xdoc.Root.Add(new XElement("define", new XAttribute("name", lvi.Text), new XAttribute("type", "common"),
                        new XElement("param", new XAttribute("file", loadText.Text + ".sps"))));
                    break;

                case "Copy/transfer":
                    //Nb
                    lvi.Text = scriptList.Items.Count.ToString();
                    //Name
                    lvi.SubItems.Add(functionBox.SelectedItem.ToString());
                    //argument
                    lvi.SubItems.Add(srcText.Text + ".sps --> "+ destText.Text + ".sps");
                    //--> add the ScriptList
                    scriptList.Items.Add(lvi);
                    //XML elements
                    xdoc.Root.Add(new XElement("task", new XAttribute("action", "Transfer"), new XAttribute("type", "file"), new XAttribute("subtype", "sps"), new XAttribute("use", lvi.Text)));
                    xdoc.Root.Add(new XElement("define", new XAttribute("name", lvi.Text), new XAttribute("type", "transfer"),
                            new XElement("from", new XAttribute("file", srcText.Text + ".sps")),
                            new XElement("to", new XAttribute("file", destText.Text + ".sps"))));
                    break;

                case "Wait":
                    //Nb
                    lvi.Text = scriptList.Items.Count.ToString();
                    //Name
                    lvi.SubItems.Add(functionBox.SelectedItem.ToString());
                    //argument
                    lvi.SubItems.Add(waitText.Text +" ms");
                    //--> add the ScriptList
                    scriptList.Items.Add(lvi);
                        // XML elements
                        xdoc.Root.Add(new XElement("task", new XAttribute("action", "Execute"), new XAttribute("type", "Timer"), new XAttribute("subtype", "Sleep"), new XAttribute("use", lvi.Text)));
                        xdoc.Root.Add(new XElement("define", new XAttribute("name", lvi.Text), new XAttribute("type", "common"),
                                new XElement("param", new XAttribute("duration", waitText.Text))));
                        break;

                case "Save":
                    //Nb
                    lvi.Text = scriptList.Items.Count.ToString();
                    //Name
                    lvi.SubItems.Add(functionBox.SelectedItem.ToString());
                    //argument
                    lvi.SubItems.Add(saveText.Text);
                    //--> add the ScriptList
                    scriptList.Items.Add(lvi);
                    //clear panel
                    activePanel.Controls.Clear();
                    //XML elements
                    xdoc.Root.Add(new XElement("task", new XAttribute("action", "save"), new XAttribute("type", "file"), new XAttribute("subtype", "sps"), new XAttribute("use", lvi.Text)));
                    xdoc.Root.Add(new XElement("define", new XAttribute("name", lvi.Text), new XAttribute("type", "common"),
                        new XElement("param", new XAttribute("file", saveText.Text + ".sps"))));
                    break;
                case "Recalibrate":
                    //Nb
                    lvi.Text = scriptList.Items.Count.ToString();
                    //Name
                    lvi.SubItems.Add(functionBox.SelectedItem.ToString());
                    //argument
                    lvi.SubItems.Add(compoundRecalText.Text+", [Interaction: "+InteractBox.SelectedItem.ToString()+"]");
                    //--> add the ScriptList
                    scriptList.Items.Add(lvi);
                    //XML elements
                        //tasks
                    xdoc.Root.Add(new XElement("task", new XAttribute("action", "create"), new XAttribute("name", "Recalib"), new XAttribute("type", "behaviour"), new XAttribute("subtype", "SingleClientCalib"), new XAttribute("use", lvi.Text)));
                    xdoc.Root.Add(new XElement("task", new XAttribute("action", "wait"), new XAttribute("name", "Recalib"), new XAttribute("state", "finished")));
                    xdoc.Root.Add(new XElement("task", new XAttribute("action", "Execute"), new XAttribute("type", "Timer"), new XAttribute("subtype", "Sleep"), new XAttribute("use", "stdWait")));
                        //define
                    xdoc.Root.Add(new XElement("define", new XAttribute("name", lvi.Text), new XAttribute("type", "BehaviourCreate"),
                                new XElement("param", new XAttribute("interactLevel",InteractBox.SelectedItem.ToString())),
                                new XElement("display", new XAttribute("tDevice","dc"), new XAttribute("name", compoundRecalText.Text))));
                        break;
                case "Recalculate Blending [3D]":
                    //Nb
                    lvi.Text = scriptList.Items.Count.ToString();
                    //Name
                    lvi.SubItems.Add(functionBox.SelectedItem.ToString());
                    //argument
                    lvi.SubItems.Add(compoundBlendText.Text);
                    //--> add the ScriptList
                    scriptList.Items.Add(lvi);
                    //XML elements
                        //tasks
                    xdoc.Root.Add(new XElement("task", new XAttribute("action", "create"), new XAttribute("name", "BlendCal"), new XAttribute("type", "behaviour"), new XAttribute("subtype", "SingleClientCalib"), new XAttribute("use", lvi.Text)));
                    xdoc.Root.Add(new XElement("task", new XAttribute("action", "wait"), new XAttribute("name", "BlendCal"), new XAttribute("state", "Interact.DeviceSel")));
                    xdoc.Root.Add(new XElement("task", new XAttribute("action", "configure"), new XAttribute("name", "BlendCal"), new XAttribute("state", "DeviceSel"), new XAttribute("use", lvi.Text+".Rb")));
                    xdoc.Root.Add(new XElement("task", new XAttribute("action", "execute"), new XAttribute("name", "BlendCalc"), new XAttribute("type", "progress")));
                    xdoc.Root.Add(new XElement("task", new XAttribute("action", "wait"), new XAttribute("name", "BlendCalc"), new XAttribute("state", "finished")));
                    xdoc.Root.Add(new XElement("task", new XAttribute("action", "execute"), new XAttribute("type", "timer"), new XAttribute("subtype", "sleep"), new XAttribute("use", "stdWait")));
                        //define
                    xdoc.Root.Add(new XElement("define", new XAttribute("name", lvi.Text), new XAttribute("type", "BehaviourCreate"),
                                new XElement("param", new XAttribute("interactLevel", "many,noFinalResult")),
                                new XElement("display", new XAttribute("tDevice","dc"), new XAttribute("name", compoundBlendText.Text))));
                    xdoc.Root.Add(new XElement("define", new XAttribute("name", lvi.Text + ".Rb"), new XAttribute("type", "SC_DevSel"),
                                new XElement("param", new XAttribute("tCalib", "preceeding"), new XAttribute("tArrangement", "hstrip"), new XAttribute("calibName", compoundBlendText.Text+"_Reblended"))));
                    break;
                case "Add VC to display Geometry":
                    //Nb
                    lvi.Text = scriptList.Items.Count.ToString();
                    //Name
                    lvi.SubItems.Add(functionBox.SelectedItem.ToString());
                    //argument
                    lvi.SubItems.Add(compoundVCText.Text);
                    //--> add the ScriptList
                    scriptList.Items.Add(lvi);
                    //XML elements
                    //tasks not complete
                    xdoc.Root.Add(new XElement("task", new XAttribute("action", "create"), new XAttribute("name", "ContentSpace"), new XAttribute("type", "behaviour"), new XAttribute("subtype", "Convert")));
                    xdoc.Root.Add(new XElement("task", new XAttribute("action", "wait"), new XAttribute("name", "ContentSpace"), new XAttribute("state", "Interact.Convert")));
                    xdoc.Root.Add(new XElement("task", new XAttribute("action", "configure"), new XAttribute("name", "ContentSpace"), new XAttribute("state", "ConvertConfig")));
                    xdoc.Root.Add(new XElement("task", new XAttribute("action", "start"), new XAttribute("name", "ContentSpace")));
                    xdoc.Root.Add(new XElement("task", new XAttribute("action", "wait"), new XAttribute("name", "ContentSpace"), new XAttribute("state", "finished")));
                    xdoc.Root.Add(new XElement("task", new XAttribute("action", "execute"), new XAttribute("type", "timer"), new XAttribute("subtype", "sleep"), new XAttribute("use", "stdWait")));
                    break;
                case "Custom content space conversion":
                    //Nb
                    lvi.Text = scriptList.Items.Count.ToString();
                    //Name
                    lvi.SubItems.Add(functionBox.SelectedItem.ToString());
                    //argument
                    lvi.SubItems.Add(compoundCCSText.Text+", Space: "+ccsText.Text);
                    //--> add the ScriptList
                    scriptList.Items.Add(lvi);
                    break;
                case "Export":
                    //Nb
                    lvi.Text = scriptList.Items.Count.ToString();
                    //Name
                    lvi.SubItems.Add(functionBox.SelectedItem.ToString());
                    //argument
                    lvi.SubItems.Add(compoundExpText.Text+", "+expPath.Text+@"\"+expName.Text+"."+expFormat.Text);
                    //--> add the ScriptList
                    scriptList.Items.Add(lvi);
                    break;

                default:
                    Console.WriteLine("No Valid Selection");
                    break;
            }
            //Butto & UI reset
            addButton.Enabled = false;
            activePanel.Controls.Clear();
            functionBox.SelectedIndex = -1;
 
        }

        
/// <summary>
/// Generates and saves the XML document
/// </summary>
        private void generateScript_Click(object sender, EventArgs e)
        {
            //generate common XML elements
            xdoc.Root.Add(new XElement("define", new XAttribute("name", "stdWait"), new XAttribute("type", "common"),
            new XElement("param", new XAttribute("duration", "3000"))));
            //SAVE dialog
            saveFileDialog1.ShowDialog();
            //Write XML file with UTF8 and no BOM
            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Encoding = new UTF8Encoding(false); // do not emit the BOM.
            settings.Indent = true; 
            using (XmlWriter w = XmlWriter.Create(saveFileDialog1.FileName, settings))
            {
                xdoc.Save(w);
            }

        }

/// <summary>
/// Reset the GUI and XML
 /// </summary>
        private void resetButton_Click(object sender, EventArgs e)
        {
            xdoc.Root.RemoveAll();
            scriptList.Items.Clear();
            addButton.Enabled = false;
            activePanel.Controls.Clear();
            functionBox.SelectedIndex = -1;
        }
    }
}
